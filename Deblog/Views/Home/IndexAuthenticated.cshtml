@model Tuple<List<Blog>, Dictionary<string, Userdata>>

@{
	ViewData["Title"] = "Home";

	var topblogs = Model.Item1;
	if (Model.Item1.Count() > 20)
	{
		topblogs = Model.Item1.GetRange(0, 6);
	}
}


@section AddToHead{
	<style>
		.container {
			margin-top: 100px;
		}

		.readmore {
			padding-top: 100px;
		}
	</style>
}



<div class="container">
	<div class="searchbar">
		<div class="searchbox">
			<i class="fal fa-search"></i>
			<input type="text" id="searchinput" autocomplete="off" />
			<i class="fal fa-times clr-search"></i>
		</div>
		<div class="suggetionbox"></div>
	</div>
	<div class="readmore">
		<div class="trendingtopics">
			<h4><i class="fal fa-hands-helping"></i> You want it, you get it.</h4>
			<div class="topics">
			</div>
			<a href="#" class="linktopics">Find more topics</a>
		</div>


		<div class="moreblogs">
			<h3><i class="fal fa-stars"> </i> See what are going trending</h3>
			<div class="blogs">
				@foreach (Blog blog in topblogs)
				{
					@if (@Model.Item2.ContainsKey(@blog.BlogAuthor))
					{


						<a asp-action="Index" asp-controller="Blog" asp-route-id=@blog.Id class="blog">
							<img class="mse blogimg" src="@blog.BlogImageUrl" alt="">
							<div class="trendblog">
								<div class="author">
									<img src="@Model.Item2[@blog.BlogAuthor].ImageUrl" alt="">
									<span>@Model.Item2[@blog.BlogAuthor].Fullname</span>
								</div>
								<div class="title">
									@blog.BlogTitle
								</div>
								<div class="otherdata">
									<div>
										@if (blog.BlogDatetime.Year == DateTime.Now.Year)
										{
											<span>@blog.BlogDatetime.ToString("MMM dd")</span>
										}
										else
										{
											<span>@blog.BlogDatetime.ToString("MMM dd, yyyy")</span>
										}
									</div>
									<span>·</span>
									<div>@blog.BlogReadtime Min</div>

								</div>
							</div>

						</a>
					}
				}
			</div>
		</div>
	</div>
</div>


<script>
	//document.addEventListener("scroll", (event) => {
	//	lastKnownScrollPosition = window.scrollY;
	//	let accentcolor = getComputedStyle(document.documentElement)
	//		.getPropertyValue('--accent-color');
	//	if (lastKnownScrollPosition > 400) {
	//		document.querySelector("nav").style.background = "#ffffff";
	//	} else {
	//		document.querySelector("nav").style.background = accentcolor;
	//	}
	//});

	document.getElementById("searchinput").addEventListener("input", (e) => {
		fetchSugg(e.target.value);
	})

	document.querySelector(".clr-search").addEventListener("click", (e) => {
		document.getElementById("searchinput").value = "";
		document.querySelector(".suggetionbox").innerHTML = "";
	})

	function fetchSugg(query) {
		if (query == "") {
			document.querySelector(".clr-search").style.display = "none";
			document.querySelector(".suggetionbox").innerHTML = "";
			return;
		}
		else {
			document.querySelector(".clr-search").style.display = "block";
		}
		let source = document.getElementById("searchinput")
		let target = document.querySelector(".suggetionbox");
		$.get("/Blog/SearchBlogs",
			{
				query: query,
			})
			.done(function (data) {
				console.log(data);
				if (data.length > 0 && source != "") {
					var suggs = "";

					data.forEach((item, index, arr) => {
						suggs += `<a href="/Blog/Index/${item["id"]}">${item["blogTitle"]}</a>`
					})

					target.innerHTML = suggs;
				}
				else {
					target.innerHTML = "";
				}
			});
	}



	let topics = ["Programming",
		"Data Science",
		"Technology",
		"Self Improvement",
		"Writing",
		"Relationships",
		"Machine Learning",
		"Productivity",
		"Politics"]

	topics.forEach(element => {
		document.querySelector(".topics").innerHTML += `<a href="#">${element}</a>`
	});




</script>

